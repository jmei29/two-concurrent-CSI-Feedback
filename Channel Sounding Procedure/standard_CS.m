%% Description:
%  Created by Jie Mei, Sept. 12, 2022
clc;
addpath('../CSI data generation/CSI-data-set-generation')% load function path of cost2100 channel model
%% Scenario Parametersl
CASE_IDX = 4;
openfile = sprintf('../simualtion_parameters_CASE_%d.mat', CASE_IDX);
load(openfile, 'parameters');
%% Training Settings
training_CASE = 3;
file_name = sprintf('/Standard/Training_Case_ID_%d', training_CASE);
file_save_dir = strcat(parameters.result_data_saving_path, file_name);
if ~exist(file_save_dir, 'dir')
    mkdir(file_save_dir)
end
DNN_file_save_dir = strcat(parameters.DNN_saving_path, file_name);
if ~exist(DNN_file_save_dir, 'dir')
    mkdir(DNN_file_save_dir)
end
%% Restart python environment to avoid memeory out
terminate(pyenv)
pyenv("ExecutionMode","OutOfProcess") % more information please refer to pyrunfile and pyenv
%% Recodrd Trainging cases
% training_CASE = 1
%% paramerters defintion for CSI feedback in the main
CH_sounding_idx = 1;
CFI_fedback_idx = 1;
learning_step = 1;
snap_idx = 1;
total_simulated_CH_num = 6000;
CF = cell(3, 1); % channel features
CFI = cell(3, 1);
duration_of_two_CFI_fed = 0;
cumulative_reward = 0;
if_train_DRL = 1;
% STA's Record
CF_record = zeros(total_simulated_CH_num, parameters.N_c + parameters.AP_antenna_num + ...
    parameters.STA_antenna_num);
CF_real_record = zeros(total_simulated_CH_num, parameters.N_c + parameters.AP_antenna_num + ...
    parameters.STA_antenna_num);
action_record_STA_side = zeros(total_simulated_CH_num, 1);
reward_fun_record_STA_side = zeros(total_simulated_CH_num, 1);
reward_fun_time_average_record_STA_side = zeros(total_simulated_CH_num, 1);
LOSS_record_STA_side = zeros(total_simulated_CH_num, 1);
learning_rate_record_STA_side = zeros(total_simulated_CH_num, 1);
utility_value_per_sounding_record = zeros(total_simulated_CH_num, 1);
CH_airtime_overhead = zeros(total_simulated_CH_num, 1);
CH_overhead = zeros(total_simulated_CH_num, 1);
CFI_overhead = zeros(total_simulated_CH_num, 1);
nmse_record = zeros(total_simulated_CH_num, 1);
nmse_Psi_record = zeros(total_simulated_CH_num, 1);
nmse_Phi_record = zeros(total_simulated_CH_num, 1);
state_action_values_STA_record = single(zeros(total_simulated_CH_num, 8));
% AP's Record
CFI_record = zeros(total_simulated_CH_num, parameters.N_c + parameters.AP_antenna_num + ...
    parameters.STA_antenna_num);
action_record_AP_side = zeros(total_simulated_CH_num, 1);
reward_fun_record_AP_side = zeros(total_simulated_CH_num, 1);
reward_fun_time_average_record_AP_side = zeros(total_simulated_CH_num, 1);
LOSS_record_AP_side = zeros(total_simulated_CH_num, 1);
learning_rate_record_AP_side = zeros(total_simulated_CH_num, 1);
state_action_values_AP_record = single(zeros(total_simulated_CH_num, parameters.num_of_CSI_compression_modes));
% others
File_idx_pre = 0;
if_terminate_training = 0;
%% two con-current Channel-related information feedback
for ep_idx = 1 : parameters.num_episode_per_CASE
    snap_idx = 1;
    while 1
        %% Break condition
        if CH_sounding_idx > total_simulated_CH_num
            if_terminate_training = 1;
            break;
        end
        if snap_idx > parameters.snap_total_num_for_test
            break;
        end
        %% determine CSI comprssion mode for real-time channel sounding procedure
        CSI_compression_mode_idx = 1;
        action_record_AP_side(CH_sounding_idx, 1) = CSI_compression_mode_idx;
        % determine parameters of CSI compression mode
        CSI_compression_modes;
        %% load CSI data generated by COST2100
        feedback_interval_in_snap = feedback_interval/parameters.snap_interval;
        File_idx = ceil(snap_idx/parameters.snap_num_per_second);
        if File_idx ~= File_idx_pre
            if_load_file = 1;
        else
            if_load_file = 0;
        end
        File_idx_pre = File_idx;
        if if_load_file
            openfile = sprintf('/Case_%d_episode_%d_File_idx_%d_CSI_data.mat', ...
                parameters.CASE_IDX, ep_idx, File_idx);
            file_open_path = strcat(parameters.CSI_data_for_performance_test_saving_path, openfile);
            if exist(file_open_path,'file') == 0
                break;
            end
            load(file_open_path, 'h_CFR_store', 'h_CIR_store');
        end
        if mod(snap_idx, parameters.snap_num_per_second) ~= 0
            H_CFR = h_CFR_store{mod(snap_idx, parameters.snap_num_per_second), 1};
            H_CIR = h_CIR_store{mod(snap_idx, parameters.snap_num_per_second), 1};
        else
            H_CFR = h_CFR_store{parameters.snap_num_per_second, 1};
            H_CIR = h_CIR_store{parameters.snap_num_per_second, 1};
        end
        % convert format of original h_CFR
        h_CFR_3D_mat = zeros(parameters.STA_antenna_num, parameters.AP_antenna_num, parameters.occupied_subcarrier);
        for x = 1 : parameters.AP_antenna_num
            for y = 1 : parameters.STA_antenna_num
                h_CFR_3D_mat(y, x, :) = H_CFR(:, y, x);
            end % end of for y
        end % end of for x
        % obtain CSI at the end of feedback interval
        if feedback_interval_in_snap ~= 1
            snap_idx_end_of_CH = snap_idx + feedback_interval_in_snap - 1;
            if snap_idx_end_of_CH > parameters.snap_total_num
                % break of inner loop
                break;
            end
            File_idx_end_of_CH = ceil(snap_idx_end_of_CH/parameters.snap_num_per_second);
            if mod(snap_idx_end_of_CH, parameters.snap_num_per_second) == 1
                openfile = sprintf('/Case_%d_episode_%d_File_idx_%d_CSI_data.mat', ...
                    parameters.CASE_IDX, ep_idx, File_idx_end_of_CH);
                file_open_path = strcat(parameters.CSI_data_for_performance_test_saving_path, openfile);
                if exist(file_open_path,'file') == 0
                    break;
                end
                load(file_open_path, 'h_CFR_store');
            end
            if mod(snap_idx_end_of_CH, parameters.snap_num_per_second) ~= 0
                H_CFR_end_of_CH = h_CFR_store{mod(snap_idx_end_of_CH, parameters.snap_num_per_second), 1};
            else
                H_CFR_end_of_CH = h_CFR_store{parameters.snap_num_per_second, 1};
            end
            % convert format of original h_CFR
            h_CFR_3D_mat_end_of_CH = zeros(parameters.STA_antenna_num, parameters.AP_antenna_num, parameters.occupied_subcarrier);
            for x = 1 : parameters.AP_antenna_num
                for y = 1 : parameters.STA_antenna_num
                    h_CFR_3D_mat_end_of_CH(y, x, :) = H_CFR_end_of_CH(:, y, x);
                end % end of for y
            end % end of for x
        else
            h_CFR_3D_mat_end_of_CH = h_CFR_3D_mat;
        end
        %% Exectue channel soudning procedure
        if CSI_compression_mode_idx <= parameters.num_of_FD_CSI_compression_modes
            %% Frequecny domain CSI feedback
            % Step 1: spatial compression
            [phi_mat, psi_mat, idx_phi, idx_psi, num_psi_phi] = ...
                spatial_compression(h_CFR_3D_mat, parameters.occupied_subcarrier, ...
                parameters.AP_antenna_num, parameters.STA_antenna_num);
            % Step 2: angle quantization
            [phi_mat_quants, psi_mat_quants] = ...
                angle_quantization(phi_mat, psi_mat, parameters.occupied_subcarrier, ...
                q_phi, q_psi);
            % Step 3: tone grouping
            [phi_mat_fb, psi_mat_fb] = ...
                tone_grouping(phi_mat_quants, psi_mat_quants, parameters.occupied_subcarrier, N_g);
            [nmse_Phi, nmse_Psi] = accuracy_psi_phi_fb(phi_mat, psi_mat, phi_mat_fb, psi_mat_fb, ...
                parameters.occupied_subcarrier);
            nmse_Phi_record(CH_sounding_idx) = nmse_Phi;
            nmse_Psi_record(CH_sounding_idx) = nmse_Psi;
        end
        %% Calculate Channel Feature-related Information (CFI)
        [H_a_d] = angle_delay_transform(H_CFR, parameters.occupied_subcarrier,...
            parameters.AP_antenna_num, parameters.STA_antenna_num, parameters.N_c);
        % (1) calculate PDP in the paper
        [PDP] = PDP_cal(H_a_d, parameters.STA_antenna_num, parameters.N_c);
        CF{1, 1} = PDP;
        % (2) calculate PAS in the paper
        [PAS] = PAS_cal(H_a_d, parameters.AP_antenna_num, parameters.STA_antenna_num);
        CF{2, 1} = PAS;
        % (3) calculate Channel varation level
        if CH_sounding_idx > 1
            [v, v_vec] = channel_varation_level_cal(H_a_d_pre, H_a_d, parameters.STA_antenna_num);
        else
            v = 0;
            v_vec = zeros(parameters.STA_antenna_num, 1);
        end
        CF{3, 1} = v_vec;
        H_a_d_pre = H_a_d;
        %% Calculate the error of reconstructed CSI
        if CSI_compression_mode_idx <= parameters.num_of_FD_CSI_compression_modes
            %% Reconstruct CSI based on Frequecny domain CSI feedback
            % reconstruct real-time CSI
            [V_recon_3D_mat] = reconstruction(phi_mat_fb, psi_mat_fb, parameters.occupied_subcarrier, ...
                parameters.AP_antenna_num, parameters.STA_antenna_num);
            % calculate eeror of reconstructed CSI (compare estimated CSI with real CSI at the end of channel sounding)
            [nmse] = accuracy_CSI_fb(V_recon_3D_mat, h_CFR_3D_mat_end_of_CH, parameters.occupied_subcarrier,...
                parameters.AP_antenna_num, parameters.STA_antenna_num, 0);
            % Overhead calculation
            num_bits_of_BR = (parameters.occupied_subcarrier/N_g)*num_psi_phi*...
                (q_psi + q_phi);
            nmse_record(CH_sounding_idx) = nmse;
        end % end of if
        %% Calculation of airtime overhead
        num_bits_of_BR = num_bits_of_BR + parameters.BR_service_field + parameters.BR_MAC_header + ...
            parameters.BR_tail_bits;
        time_duration_BR = parameters.preamble_BR + (num_bits_of_BR/parameters.num_bits_per_OFDM_symbol)...
            * parameters.duration_OFDM_symbol;
        airtime_overhead = parameters.time_duration_NDPA + parameters.time_duration_NDP + ...
            time_duration_BR + 3*parameters.time_duration_SIFS;
        CH_airtime_overhead(CH_sounding_idx) = airtime_overhead;
        CH_overhead(CH_sounding_idx) = num_bits_of_BR;
        %% Oppturtinistic CFI feedback at STA side
        duration_of_two_CFI_fed = duration_of_two_CFI_fed + 1; % in number of channel sounding
        %% Calculation of utlity(reward) function
        utility_value_per_sounding = util_fun_nmse(nmse,parameters.nmse_in_dB_low_bound,parameters.nmse_in_dB_up_bound, ...
            parameters.nmse_util_TH_value) + ...
            parameters.rho_0*util_fun_CH_overhead(airtime_overhead, feedback_interval, parameters.AO_max, ...
            parameters.AO_min);
        utility_value_per_sounding_record(CH_sounding_idx, 1) = utility_value_per_sounding;
        %% New CFI feedback
        CFI_fedback_idx = CFI_fedback_idx + 1;
        %% Make decisions to adapt the channel sounding at AP side based on DRL
        %% Check Point
        if mod(CH_sounding_idx, 100) == 0 && CH_sounding_idx > 10
            figure(1)
            subplot(2,1,1)
            histogram(action_record_AP_side(4:CH_sounding_idx))
            hold on
            histogram(action_record_STA_side(4:CH_sounding_idx))
            legend('Actions of AP','Actions of STA');
            hold off
            pause(1);
        end % end of check point
        %% Renew Channel Sounding Index
        CH_sounding_idx = CH_sounding_idx + 1;
        %% Renew snap index
        snap_idx = snap_idx + feedback_interval_in_snap;
        fprintf('snap_idx = %d\n', snap_idx)
    end % end of loop_snap
    %% break condtion of outer loop
    if if_terminate_training
        break
    end
end % end of ep_idx
%%
CH_sounding_idx = CH_sounding_idx - 1;
reward_fun_record_AP_side = reward_fun_record_AP_side(1:CH_sounding_idx,:);
reward_fun_time_average_record_AP_side = reward_fun_time_average_record_AP_side(1:CH_sounding_idx,:);
LOSS_record_AP_side = LOSS_record_AP_side(1:CH_sounding_idx,:);
utility_value_per_sounding_record = utility_value_per_sounding_record(1:CH_sounding_idx,:);
CH_airtime_overhead = CH_airtime_overhead(1:CH_sounding_idx,:);
CH_overhead = CH_overhead(1:CH_sounding_idx,:);
CFI_overhead = CFI_overhead(1:CH_sounding_idx,:);
action_record_AP_side = action_record_AP_side(1:CH_sounding_idx,:);
action_record_STA_side = action_record_STA_side(1:CH_sounding_idx,:);
nmse_record = nmse_record(1:CH_sounding_idx,:);
learning_rate_record_AP_side = learning_rate_record_AP_side(1:CH_sounding_idx,:);
learning_rate_record_STA_side = learning_rate_record_STA_side(1:CH_sounding_idx,:);
nmse_Psi_record = nmse_Psi_record(1:CH_sounding_idx,:);
nmse_Phi_record = nmse_Phi_record(1:CH_sounding_idx,:);
reward_fun_record_STA_side = reward_fun_record_STA_side(1:CH_sounding_idx,:);
CF_real_record = CF_real_record(1:CH_sounding_idx,:);
savefile = sprintf('/Case_%d_CSI_fed_result_test_CASE_%d.mat', parameters.CASE_IDX, training_CASE);
file_save_path = strcat(file_save_dir, savefile);
save(file_save_path, 'reward_fun_record_AP_side', 'reward_fun_time_average_record_AP_side',...
    'LOSS_record_AP_side', 'utility_value_per_sounding_record','CH_airtime_overhead','CH_overhead',...
    'CFI_overhead','CF_real_record','action_record_AP_side','action_record_STA_side','nmse_record',...
    'learning_rate_record_AP_side', 'learning_rate_record_STA_side',...
    'nmse_Psi_record', 'nmse_Phi_record', 'reward_fun_record_STA_side');